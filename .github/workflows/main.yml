## 1. O pipeline deve ser ativado sempre que um novo commit for feito na branch main. ✔
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
           
      # configuracao para acessar o Docker Hub

      - name: Set up Docker
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.SECRET_RACO1 }}
          password: ${{ secrets.SECRET_RACO }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./src
          file: ./src/Dockerfile
          push: true
          tags: |
            raco21/kube-news:latest

# 2. O pipeline deve executar os seguintes passos: 
  # Criacao do Release
  
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v7.7.7   # Substituir por sua versão dinâmica
          release_name: Release v7.7.7
          body: |
            Esta é a versão 7.7.7 da aplicação.
            - Lista de mudanças relevantes no release.
          draft: false
          prerelease: false

    # Notifica o DevOps em caso de falha  
      - name: Notify Failure
        if: ${{ failure() }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ secrets.EMAIL_USERNAME }}
          subject: "Approval Job Failed - ${{ github.repository }}"
          body: "O job de aprovação falhou para o repositório ${{ github.repository }}. Confira o workflow para mais detalhes."
          to: ${{ secrets.DEVELOPER_EMAIL }}    

<<<<<<< HEAD
# 3. Se todos os passos acima forem bem-sucedidos, o pipeline deve fazer o deploy da aplicação em um ambiente de teste. ✔
  
  CD:
=======
## Processo de entrega 
  CD: 
>>>>>>> Update main.yml
    runs-on: ubuntu-latest
    needs:
      - CI
    environment: 
      name: production # Substituir pelo nome do seu ambiente real
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

<<<<<<< HEAD
      - name: Set Kubernetes Context
        uses: Azure/k8s-set-context@v3
=======
        ## 3. Se todos os passos acima forem bem-sucedidos, o pipeline deve fazer o deploy da aplicaçao.

      ## Aprovação do Projeto  

      - name: Request approval
        uses: actions/github-script@v4
        with:
          script: |
            const { data: { html_url: pullRequestUrl } } = await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deploy approval',
              head: context.sha,
              base: 'main'
            });

            core.setOutput('pull-request-url', pullRequestUrl);

      - name: Wait for approval
        uses: actions/github-script@v4
        with:
          script: |
            const { data: reviews } = await github.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const approved = reviews.some(review => review.state === 'APPROVED');

            if (!approved) {
              throw new Error('Deploy approval not granted');
            } 
      - name: Set Kubernetes Context ## Apesar de ser da Azure o Context pode ser usado em qualquer cluster que tenha o kube config.
        uses: Azure/k8s-set-context@v3.0
>>>>>>> Update main.yml
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.K8S_CONFIG }}

      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v4.9     
        with:
          images: raco21/kube-news:latest
          manifests: |
            k8s/deployment.yaml

<<<<<<< HEAD
    # Informa o endereco para acessar a aplicacao
      - name: Get Application URL
        run: |
          APP_IP=$(kubectl get svc kubenews -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Application is available at http://${APP_IP}"
=======
## Processo de criação de Release - Armazenar o artefato como release do github
      - name: Create Release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Substitua pelo nome da sua variável de ambiente/secreto contendo o token de acesso
          tag_name: v1.0.0
          release_name: Release v1.0.0
          body: 'Descrição da release'
          draft: false
          prerelease: false
          owner: viaraco21
          repo: kube-news
>>>>>>> Update main.yml

    # Notifica o DevOps sobre o final do Deploy

<<<<<<< HEAD
=======
    ## 4. Notificar o desenvolvedor via e-mail qunando o processo finalizar
>>>>>>> Update main.yml
      - name: Notify on CI Approval
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          from: ${{ secrets.EMAIL_USERNAME }}
          subject: "CI Job Approved - ${{ github.repository }}"
          body: |
            O job CI foi aprovado para o repositório ${{ github.repository }}.
            A aplicação está disponível
          to: ${{ secrets.DEVELOPER_EMAIL }}